/* Copyright 2018 noseglasses <shinynoseglasses@gmail.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "Generator/PPG_Global.hpp"

#include "ParserTree/PPG_Token.hpp"
#include "ParserTree/PPG_Action.hpp"
#include "ParserTree/PPG_Input.hpp"
#include "ParserTree/PPG_Pattern.hpp"

#include "PPG_Compiler.hpp"

#include <ostream>
#include <fstream>

extern struct gengetopt_args_info ai;

namespace Papageno {
namespace Generator {
   
// Add a flag to enable local initialization for 
// all input classes.
//
#ifdef PPG_ENABLE_INPUT_LOCAL_INITIALIZATION_ALL
// For all classes
#   ifndef PPG_ENABLE_INPUT_LOCAL_INITIALIZATION___<TAG>
#      define PPG_ENABLE_INPUT_LOCAL_INITIALIZATION___<TAG>
#   endif
// End for all classes
#endif
   
// Enable the same type of initialization for all 
// classes.
//
#ifndef PPG_INPUT_INITIALIZE
#   define PPG_INPUT_INITIALIZE(ID, ...) __VA_ARGS__
#endif
   
// Distinguish between global and local
// initialization by class.
//
// For all classes
//
// If no class wise initialization is desired 
// we use the common initialization 
// method
//
#ifndef PPG_INPUT_INITIALIZE___<TAG>
#   define PPG_INPUT_INITIALIZE___<TAG>(ID, ...) \
      PPG_INPUT_INITIALIZE(ID, __VA_ARGS__)
#endif
   
#ifdef PPG_ENABLE_INPUT_LOCAL_INITIALIZATION___<TAG>
#   ifndef PPG_INPUT_INITIALIZE_LOCAL___<TAG>
#      define PPG_INPUT_INITIALIZE_LOCAL___<TAG>(ID, PATH, ...) \
            PATH = PPG_INPUT_INITIALIZE___<TAG>(ID, __VA_ARGS__)
#   endif
#   ifndef PPG_INPUT_INITIALIZE_GLOBAL___<TAG>
#      define PPG_INPUT_INITIALIZE_GLOBAL___<TAG>(ID, ...) 0
#   endif
#else
#   ifndef PPG_INPUT_INITIALIZE_LOCAL___<TAG>
#      define PPG_INPUT_INITIALIZE_LOCAL___<TAG>(ID, PATH, ...)
#   endif
#   ifndef PPG_INPUT_INITIALIZE_GLOBAL___<TAG>
#      define PPG_INPUT_INITIALIZE_GLOBAL___<TAG>(ID, ...) \
            PPG_INPUT_INITIALIZE___<TAG>(ID, __VA_ARGS__)
#   endif
#endif
            
// End for all classes

// Define a common entry point by class type for
// local initialization
//
// For all classes
// Automatisch generieren waehrend der Baum erzeugt wird
#define PPG_INPUT_INITIALIZE_LOCAL_ALL___<TAG> \
   /* For all input assignments */ \
   PPG_INPUT_INITIALIZE_LOCAL___<TAG>(the_id, the_path, the_args) \
   /* End for all input assignments */
// End for all classes
      
// Define a common entry point for local initialization
//
#define PPG_INPUT_INITIALIZE_LOCAL_ALL \
  /* For all classes */ \
  PPG_INPUT_INITIALIZE_LOCAL_ALL___<TAG> \
  /* End for all classes */
  
// Das gleiche fuer all actions
   
void caption(std::ostream &out, const std::string &title)
{
   out <<
"//##############################################################################\n"
"// " << title << "\n"
"//##############################################################################\n"
"\n";
}

static void outputInfoAboutSpecificOverride(std::ostream &out)
{
   out <<
"// The following macro can be defined in a preamble header to customize \n"
"// Papagenos input-action behavior.\n"
"//\n";
}

static void outputInformationOfDefinition(std::ostream &out, const ParserTree::Node &node)
{
   const auto &lod = node.getLOD();
   
   if(lod) {
      out <<
"#line " << lod.location_.first_line << " \"" << lod.file_ << "\"\n";
   }

   out <<
"// " << lod << "\n";
   out <<
"//\n";
}
   
void generateFileHeader(std::ostream &out) {
   
   out <<
"// Generated by Papageno compiler version " << PAPAGENO_VERSION << "\n";
   out <<
"\n";

   caption(out, "File content");
   
   for(std::size_t i = 0; i < Papageno::Parser::filesParsed.size(); ++i) {
      out << 
"/* File " << Papageno::Parser::filesParsed[i] << "\n"
"\n";
      out << Papageno::Parser::codeParsed[i] << "\n"
"*/\n"
"\n";
   }

   out <<
"#include \"detail/ppg_context_detail.h\"\n"
"#include \"detail/ppg_token_detail.h\"\n"
"#include \"detail/ppg_note_detail.h\"\n"
"#include \"detail/ppg_chord_detail.h\"\n"
"#include \"detail/ppg_cluster_detail.h\"\n"
"#include \"ppg_input.h\"\n"
"\n";

   if(ai.preamble_filename_arg) {
      out <<
"#include \"" << ai.preamble_filename_arg << "\"\n";
      out <<
"\n";
   }
   
   out <<
"#ifdef PAPAGENO_PREAMBLE_HEADER\n"
"#include PAPAGENO_PREAMBLE_HEADER\n"
"#endif\n\n";
   
  out <<
"#define PPG_NUM_BITS_LEFT(N_BITS) \\\n"
"   (N_BITS%(8*sizeof(PPG_Bitfield_Storage_Type)))\n\n";
      
   out << 
"#define PPG_NUM_BYTES(N_BITS) \\\n"
"   (N_BITS/(8*sizeof(PPG_Bitfield_Storage_Type)))\n\n";
}
   
void generateGlobalActionInformation(std::ostream &out)
{
   auto actionsByType = ParserTree::Action::getActionsByType();
   
   caption(out, "Actions");

   outputInfoAboutSpecificOverride(out);
   out <<
"#ifndef PPG_CONFIGURE_ACTIONS_GLOBAL\n"
"#define PPG_CONFIGURE_ACTIONS_GLOBAL(...)\n"
"#endif\n\n";

   outputInfoAboutSpecificOverride(out);
   out <<
"#ifndef PPG_CONFIGURE_ACTIONS_LOCAL\n"
"#define PPG_CONFIGURE_ACTIONS_LOCAL(...)\n"
"#endif\n\n";

   for(const auto &abtEntry: actionsByType) {
      const auto &tag = abtEntry.first;
   
      outputInfoAboutSpecificOverride(out);
      out <<
"#ifndef PPG_ACTION_INITIALIZATION___" << tag << "\n";
      out << 
"#define PPG_ACTION_INITIALIZATION___" << tag << "(...) __VA_ARGS__\n";
      out <<
"#endif\n"
"\n";

      out <<
"#define PPG_ACTIONS___" << tag << "(OP) \\\n";

      for(const auto &actionPtr: abtEntry.second) {
         out <<
"   OP(" << actionPtr->getId().getText() << ")\\\n";
      }
      
      out <<
"\n";
         
      outputInfoAboutSpecificOverride(out);
      out <<
   "#ifndef PPG_CONFIGURE_ACTIONS_GLOBAL___" << tag << "\n"
   "#define PPG_CONFIGURE_ACTIONS_GLOBAL___" << tag << "(...) \\\n"
   "   PPG_CONFIGURE_ACTIONS_GLOBAL(__VA_ARGS__)\n"
   "#endif\n\n";

      outputInfoAboutSpecificOverride(out);
      out <<
   "#ifndef PPG_CONFIGURE_ACTIONS_LOCAL___" << tag << "\n"
   "#define PPG_CONFIGURE_ACTIONS_LOCAL___" << tag << "(...) \\\n"
   "   PPG_CONFIGURE_ACTIONS_LOCAL(__VA_ARGS__)\n"
   "#endif\n\n";
   }
   
   out <<
"#define PPG_ACTIONS_ALL(OP) \\\n";

   for(const auto &abtEntry: actionsByType) {
      const auto &tag = abtEntry.first;
      out <<
"   PPG_ACTIONS___" << tag << "(OP) \\\n";
   }
   out << "\n";
   
   out <<
"#define PPG_CUSTOM_CONFIGURE_ACTIONS_GLOBAL \\\n";
   for(const auto &abtEntry: actionsByType) {
      const auto &tag = abtEntry.first;
      out <<
"   PPG_ACTIONS___" << tag << "(PPG_CONFIGURE_ACTIONS_GLOBAL___" << tag << ") \\\n";
   }
   out << 
"\n";

   out <<
"PPG_CUSTOM_CONFIGURE_ACTIONS_GLOBAL\n\n";

   out <<
"#define PPG_CUSTOM_CONFIGURE_ACTIONS_LOCAL \\\n";
   for(const auto &abtEntry: actionsByType) {
      const auto &tag = abtEntry.first;
      out <<
"   PPG_ACTIONS___" << tag << "(PPG_CONFIGURE_ACTIONS_LOCAL___" << tag << ") \\\n";
   }
   out << 
"\n";

}

void generateGlobalInputInformation(std::ostream &out)
{
   auto inputsByType = ParserTree::Input::getInputsByType();
   
   caption(out, "Inputs");
      
   outputInfoAboutSpecificOverride(out);
   out <<
"#ifndef PPG_CONFIGURE_INPUTS_GLOBAL\n"
"#define PPG_CONFIGURE_INPUTS_GLOBAL(...)\n"
"#endif\n\n";

   outputInfoAboutSpecificOverride(out);
   out <<
"#ifndef PPG_CONFIGURE_INPUTS_LOCAL\n"
"#define PPG_CONFIGURE_INPUTS_LOCAL(...)\n"
"#endif\n\n";

   for(const auto &abtEntry: inputsByType) {
      const auto &tag = abtEntry.first;
   
      outputInfoAboutSpecificOverride(out);
      out <<
"#ifndef PPG_INPUT_INITIALIZATION___" << tag << "\n";
      out << 
"#define PPG_INPUT_INITIALIZATION___" << tag << "(...) __VA_ARGS__\n";
      out <<
"#endif\n"
"\n";

      out <<
"#define PPG_INPUTS___" << tag << "(OP) \\\n";

      for(const auto &inputPtr: abtEntry.second) {
         out <<
"   OP(" << inputPtr->getId().getText() << ")\\\n";
      }
      
      out <<
"\n";
         
      outputInfoAboutSpecificOverride(out);
      out <<
   "#ifndef PPG_CONFIGURE_INPUTS_GLOBAL___" << tag << "\n"
   "#define PPG_CONFIGURE_INPUTS_GLOBAL___" << tag << "(...) \\\n"
   "   PPG_CONFIGURE_INPUTS_GLOBAL(__VA_ARGS__)\n"
   "#endif\n\n";

      outputInfoAboutSpecificOverride(out);
      out <<
   "#ifndef PPG_CONFIGURE_INPUTS_LOCAL___" << tag << "\n"
   "#define PPG_CONFIGURE_INPUTS_LOCAL___" << tag << "(...) \\\n"
   "   PPG_CONFIGURE_INPUTS_LOCAL(__VA_ARGS__)\n"
   "#endif\n\n";
   }

   out <<
"#define PPG_INPUTS_ALL(OP) \\\n";

   for(const auto &abtEntry: inputsByType) {
      const auto &tag = abtEntry.first;
      out <<
"   PPG_INPUTS___" << tag << "(OP) \\\n";
   }
   out << "\n";   
   
   out <<
"#define PPG_CUSTOM_CONFIGURE_INPUTS_GLOBAL \\\n";
   for(const auto &abtEntry: inputsByType) {
      const auto &tag = abtEntry.first;
      out <<
"   PPG_INPUTS___" << tag << "(PPG_CONFIGURE_INPUTS_GLOBAL___" << tag << ") \\\n";
   }
   out << 
"\n";

   out <<
"PPG_CUSTOM_CONFIGURE_INPUTS_GLOBAL\n\n";

   out <<
"#define PPG_CUSTOM_CONFIGURE_INPUTS_LOCAL \\\n";
   for(const auto &abtEntry: inputsByType) {
      const auto &tag = abtEntry.first;
      out <<
"   PPG_INPUTS___" << tag << "(PPG_CONFIGURE_INPUTS_LOCAL___" << tag << ") \\\n";
   }
   out << 
"\n";

}

void recursivelyOutputToken(std::ostream &out, const ParserTree::Token &token)
{
   for(const auto &childTokenPtr: token.getChildren()) {
      recursivelyOutputToken(out, *childTokenPtr);
   }
   
   outputInformationOfDefinition(out, token);
   token.generateCCode(out);
}

void recursivelyOutputTokenForwardDeclaration(std::ostream &out, const ParserTree::Token &token)
{
   out <<
"extern ";
   token.outputCTokenDeclaration(out);
   out << ";\n";

   for(const auto &childTokenPtr: token.getChildren()) {
      recursivelyOutputTokenForwardDeclaration(out, *childTokenPtr);
   }
}

void recursivelyGetMaxEvents(const ParserTree::Token &token, int curDepth, int &maxDepth, int curInputs, int &maxInputs)
{
   curInputs += token.getNumInputs();
   ++curDepth;
   
   if(token.getChildren().empty()) {
      if(curInputs > maxInputs) {
         maxInputs = curInputs;
      }
      if(curDepth > maxDepth) {
         maxDepth = curDepth;
      }
   }
   else {
      for(const auto &childTokenPtr: token.getChildren()) {
         recursivelyGetMaxEvents(*childTokenPtr, curDepth, maxDepth, curInputs, maxInputs);
      }
   }
}

void generateGlobalContext(std::ostream &out)
{
   auto root = ParserTree::Pattern::getTreeRoot();
   
   caption(out, "Token tree forward declarations");
   
   recursivelyOutputTokenForwardDeclaration(out, *root);
   out << "\n";
   
   caption(out, "Token tree");
   
   // Recursively output token tree
   //
   recursivelyOutputToken(out, *root);
   
   caption(out, "Context");
   
   int maxDepth = 0;
   int maxEvents = 0;
   recursivelyGetMaxEvents(*root, 0, maxDepth, 0, maxEvents);
   assert(maxDepth > 0);
   assert(maxEvents > 0);
   
   out <<
"PPG_Event_Queue_Entry event_buffer[" << maxEvents << "];\n\n";

   out <<
"PPG_Furcation furcations[" << maxDepth << "];\n\n";
   
   out <<
"PPG_Token__ *tokens[" << maxDepth << "];\n\n";
   out <<
"PPG_Context context = (PPG_Context) {\n"
"   .event_buffer = (PPG_Event_Buffer) {\n"
"      .events = event_buffer,\n"
"      .start = 0,\n"
"      .end = 0,\n"
"      .cur = 0,\n"
"      .size = 0,\n"
"      .max_size = " << maxEvents << "\n";
   out <<
"   },\n"
"   .furcation_stack = (PPG_Furcation_Stack) {\n"
"      .furcations = furcations,\n"
"      .n_furcations = 0,\n"
"      .cur_furcation = 0,\n"
"      .max_furcations = " << maxDepth << "\n";
   out <<
"   },\n"
"   .active_tokens = (PPG_Active_Tokens) {\n"
"      .tokens = tokens,\n"
"      .n_tokens = 0,\n"
"      .max_tokens = " << maxDepth << "\n";
   out <<
"   },\n"
"   .pattern_root = &" << root->getId().getText() << "\n"
"};\n\n";
}
   
void generateInitializationFunction(std::ostream &out)
{
   caption(out, "Initialization");
   
   out <<
"void papageno_initialize_context()\n"
"{\n";
   out <<
"   PPG_CUSTOM_CONFIGURE_ACTIONS_LOCAL\n\n";
   out <<
"   PPG_CUSTOM_CONFIGURE_INPUTS_LOCAL\n\n";
   out <<
"   ppg_global_initialize_context_static(&context);\n"
"   ppg_context = &context;\n"
"}\n\n";
}

void generateGlobal(const std::string &outputFilename)
{
   std::ofstream outputFile(outputFilename);
   
   generateFileHeader(outputFile);
   
   // Generate global action information
   generateGlobalActionInformation(outputFile);
   
   generateGlobalInputInformation(outputFile);
   
   generateGlobalContext(outputFile);
   
   generateInitializationFunction(outputFile);
}

} // namespace ParserTree
} // namespace Papageno
