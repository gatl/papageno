/** @file GLS_CommandLineGengetopt.hpp
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.22.6
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt by Lorenzo Bettini */

#ifndef GLS_COMMANDLINEGENGETOPT_H
#define GLS_COMMANDLINEGENGETOPT_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PARSER_PACKAGE
/** @brief the program name (used for printing errors) */
#define CMDLINE_PARSER_PACKAGE "glockenspiel"
#endif

#ifndef CMDLINE_PARSER_PACKAGE_NAME
/** @brief the complete program name (used for help and version) */
#define CMDLINE_PARSER_PACKAGE_NAME "glockenspiel"
#endif

#ifndef CMDLINE_PARSER_VERSION
/** @brief the program version */
#define CMDLINE_PARSER_VERSION "7ffe6fc6cb653c912268ddfa6e472e2eb1386a55"
#endif

/** @brief Where the command line options are stored */
struct gengetopt_args_info
{
  const char *help_help; /**< @brief Print help and exit help description.  */
  const char *version_help; /**< @brief Print version and exit help description.  */
  char ** source_filename_arg;	/**< @brief Source filename.  */
  char ** source_filename_orig;	/**< @brief Source filename original value given at command line.  */
  unsigned int source_filename_min; /**< @brief Source filename's minimum occurreces */
  unsigned int source_filename_max; /**< @brief Source filename's maximum occurreces */
  const char *source_filename_help; /**< @brief Source filename help description.  */
  char * output_filename_arg;	/**< @brief Output filename.  */
  char * output_filename_orig;	/**< @brief Output filename original value given at command line.  */
  const char *output_filename_help; /**< @brief Output filename help description.  */
  char * preamble_filename_arg;	/**< @brief Preamble filename.  */
  char * preamble_filename_orig;	/**< @brief Preamble filename original value given at command line.  */
  const char *preamble_filename_help; /**< @brief Preamble filename help description.  */
  char * project_name_arg;	/**< @brief The name of the project to generate Papageno code for.  */
  char * project_name_orig;	/**< @brief The name of the project to generate Papageno code for original value given at command line.  */
  const char *project_name_help; /**< @brief The name of the project to generate Papageno code for help description.  */
  char ** include_directory_arg;	/**< @brief Include directory.  */
  char ** include_directory_orig;	/**< @brief Include directory original value given at command line.  */
  unsigned int include_directory_min; /**< @brief Include directory's minimum occurreces */
  unsigned int include_directory_max; /**< @brief Include directory's maximum occurreces */
  const char *include_directory_help; /**< @brief Include directory help description.  */
  int debug_flag;	/**< @brief Generate debug output during the compile (default=off).  */
  const char *debug_help; /**< @brief Generate debug output during the compile help description.  */
  int join_duplicate_entities_flag;	/**< @brief Join duplicate actions and inputs (default=off).  */
  const char *join_duplicate_entities_help; /**< @brief Join duplicate actions and inputs help description.  */
  int join_duplicate_actions_flag;	/**< @brief Join duplicate actions (default=off).  */
  const char *join_duplicate_actions_help; /**< @brief Join duplicate actions help description.  */
  int join_duplicate_inputs_flag;	/**< @brief Join duplicate inputs (default=off).  */
  const char *join_duplicate_inputs_help; /**< @brief Join duplicate inputs help description.  */
  int join_note_sequences_flag;	/**< @brief Join note sequences (default=off).  */
  const char *join_note_sequences_help; /**< @brief Join note sequences help description.  */
  int allow_auto_type_definition_flag;	/**< @brief Allow automatic definition of all entity types (default=off).  */
  const char *allow_auto_type_definition_help; /**< @brief Allow automatic definition of all entity types help description.  */
  int allow_auto_input_type_definition_flag;	/**< @brief Allow automatic definition of input types (default=off).  */
  const char *allow_auto_input_type_definition_help; /**< @brief Allow automatic definition of input types help description.  */
  int allow_auto_action_type_definition_flag;	/**< @brief Allow automatic definition of action types (default=off).  */
  const char *allow_auto_action_type_definition_help; /**< @brief Allow automatic definition of action types help description.  */
  char * macros_prefix_arg;	/**< @brief A prefix to be added to all macros defined in the output file.  */
  char * macros_prefix_orig;	/**< @brief A prefix to be added to all macros defined in the output file original value given at command line.  */
  const char *macros_prefix_help; /**< @brief A prefix to be added to all macros defined in the output file help description.  */
  char * symbols_prefix_arg;	/**< @brief A prefix to be added to all C/C++ symbols defined in the output file.  */
  char * symbols_prefix_orig;	/**< @brief A prefix to be added to all C/C++ symbols defined in the output file original value given at command line.  */
  const char *symbols_prefix_help; /**< @brief A prefix to be added to all C/C++ symbols defined in the output file help description.  */
  
  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int version_given ;	/**< @brief Whether version was given.  */
  unsigned int source_filename_given ;	/**< @brief Whether source_filename was given.  */
  unsigned int output_filename_given ;	/**< @brief Whether output_filename was given.  */
  unsigned int preamble_filename_given ;	/**< @brief Whether preamble_filename was given.  */
  unsigned int project_name_given ;	/**< @brief Whether project_name was given.  */
  unsigned int include_directory_given ;	/**< @brief Whether include_directory was given.  */
  unsigned int debug_given ;	/**< @brief Whether debug was given.  */
  unsigned int join_duplicate_entities_given ;	/**< @brief Whether join_duplicate_entities was given.  */
  unsigned int join_duplicate_actions_given ;	/**< @brief Whether join_duplicate_actions was given.  */
  unsigned int join_duplicate_inputs_given ;	/**< @brief Whether join_duplicate_inputs was given.  */
  unsigned int join_note_sequences_given ;	/**< @brief Whether join_note_sequences was given.  */
  unsigned int allow_auto_type_definition_given ;	/**< @brief Whether allow_auto_type_definition was given.  */
  unsigned int allow_auto_input_type_definition_given ;	/**< @brief Whether allow_auto_input_type_definition was given.  */
  unsigned int allow_auto_action_type_definition_given ;	/**< @brief Whether allow_auto_action_type_definition was given.  */
  unsigned int macros_prefix_given ;	/**< @brief Whether macros_prefix was given.  */
  unsigned int symbols_prefix_given ;	/**< @brief Whether symbols_prefix was given.  */

} ;

/** @brief The additional parameters to pass to parser functions */
struct cmdline_parser_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure gengetopt_args_info (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure gengetopt_args_info (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *gengetopt_args_info_purpose;
/** @brief the usage string of the program */
extern const char *gengetopt_args_info_usage;
/** @brief the description string of the program */
extern const char *gengetopt_args_info_description;
/** @brief all the lines making the help output */
extern const char *gengetopt_args_info_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser (int argc, char **argv,
  struct gengetopt_args_info *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_ext() instead
 */
int cmdline_parser2 (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_ext (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  struct cmdline_parser_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_dump(FILE *outfile,
  struct gengetopt_args_info *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_file_save(const char *filename,
  struct gengetopt_args_info *args_info);

/**
 * Print the help
 */
void cmdline_parser_print_help(void);
/**
 * Print the version
 */
void cmdline_parser_print_version(void);

/**
 * Initializes all the fields a cmdline_parser_params structure 
 * to their default values
 * @param params the structure to initialize
 */
void cmdline_parser_params_init(struct cmdline_parser_params *params);

/**
 * Allocates dynamically a cmdline_parser_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized cmdline_parser_params structure
 */
struct cmdline_parser_params *cmdline_parser_params_create(void);

/**
 * Initializes the passed gengetopt_args_info structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void cmdline_parser_init (struct gengetopt_args_info *args_info);
/**
 * Deallocates the string fields of the gengetopt_args_info structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void cmdline_parser_free (struct gengetopt_args_info *args_info);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int cmdline_parser_required (struct gengetopt_args_info *args_info,
  const char *prog_name);


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* GLS_COMMANDLINEGENGETOPT_H */
