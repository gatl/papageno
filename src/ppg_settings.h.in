/* Copyright 2017 Florian Fleissner
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef PPG_TYPES_H
#define PPG_TYPES_H

/** @file */

#include "stdint.h"

// The maximum number of events that can be stored
//
/** @brief The maximum lenght of a sequence of events that can represent a pattern.
 */
#define PPG_MAX_EVENTS @__PPG_MAX_EVENTS@

/** @brief The maximum number of inputs that can be used continuously.
 * 
 * Please be careful when increasing this number, as memory
 * is allocated for the number of inputs. Also larger interger 
 * data types must be used in some places when this value exceeds 256.
 */
#define PPG_MAX_INPUTS @__PPG_MAX_INPUTS@

/** @brief An unsigned integer type that is used to store 
 * small numbers
 */
#define PPG_SMALL_UNSIGNED_INT_TYPE @__PPG_SMALL_UNSIGNED_INT_TYPE@

/** @brief A signed integer type that is used to store 
 * small numbers
 */
#define PPG_SMALL_SIGNED_INT_TYPE @__PPG_SMALL_SIGNED_INT_TYPE@

/** @brief A signed integer type that is used to store 
 * larger numbers
 */
#define PPG_MEDIUM_SIGNED_INT_TYPE @__PPG_MEDIUM_SIGNED_INT_TYPE@

// Define PPG_PEDANTIC_TOKENS
// to ensure that any match requires a
// matching deactivation of an input for 
// every activation event

#if @__PPG_PEDANTIC_TOKENS_ENABLED@
#define PPG_PEDANTIC_TOKENS
#endif

/** @brief This macro enables to define the count type from outside the
 * compile process, e.g. from a build system
 */
#define PPG_COUNT_TYPE @__PPG_COUNT_TYPE@

/** @brief An integer type that is generally used to count entities and as loop counter
 */
typedef PPG_COUNT_TYPE PPG_Count;

/** @brief This macro enables to define the id type from outside the
 * compile process, e.g. from a build system
 */
#define PPG_ID_TYPE @__PPG_ID_TYPE@

/** @brief An integer type that is used whenever a signed id is used to code non zero initial state as error
 */
typedef PPG_ID_TYPE PPG_Id;

/** @brief This macro enables to define the action flags type from outside the
 * compile process, e.g. from a build system
 */
#define PPG_ACTION_FLAGS_TYPE @__PPG_ACTION_FLAGS_TYPE@

/** @brief The data type used to store action flags
 */
typedef PPG_ACTION_FLAGS_TYPE PPG_Action_Flags_Type;

/** @brief This macro enables to define the layer type from outside the
 * compile process, e.g. from a build system
 */
#define PPG_LAYER_TYPE @__PPG_LAYER_TYPE@

/** The data type that is used to reference layers
 */
typedef PPG_LAYER_TYPE PPG_Layer;

/** @brief This macro enables to define the signal id type from outside the
 * compile process, e.g. from a build system
 */
#define PPG_SLOT_ID_TYPE @__PPG_SLOT_ID_TYPE@

/** @brief The data type used to identify signals
 */
typedef PPG_SLOT_ID_TYPE PPG_Signal_Id;

/** @brief This macro enables to define the time comparison result type from outside the
 * compile process, e.g. from a build system
 */
#define PPG_TIME_COMPARISON_RESULT_TYPE @__PPG_TIME_COMPARISON_RESULT_TYPE@

/** @brief The signed integer type used to code the result of the time comparison function
 */
typedef PPG_TIME_COMPARISON_RESULT_TYPE PPG_Time_Comparison_Result_Type;

/** @brief This macro enables to define the event buffer index type from outside the
 * compile process, e.g. from a build system
 */
#define PPG_EVENT_BUFFER_INDEX_TYPE @__PPG_EVENT_BUFFER_INDEX_TYPE@

/** @brief The signed data type that is used to index events
 */
typedef PPG_SMALL_SIGNED_INT_TYPE PPG_Event_Buffer_Index_Type;

/** @brief This macro enables to define the processing state flag type from outside the
 * compile process, e.g. from a build system
 */
#define PPG_PROCESSING_STATE_TYPE @__PPG_PROCESSING_STATE_TYPE@

/** @brief The data type used for processing states
 */
typedef PPG_PROCESSING_STATE_TYPE PPG_Processing_State;

/** @brief This macro enables to define the time identifier type from outside the
 * compile process, e.g. from a build system
 */
#define PPG_TIME_IDENTIFIER_TYPE @__PPG_TIME_IDENTIFIER_TYPE@

/** @brief Time identifier type.
 */
typedef PPG_TIME_IDENTIFIER_TYPE PPG_Time;

#define PPG_PRINT_SELF_ENABLED @__PPG_PRINT_SELF_ENABLED@

#define PPG_HAVE_ASSERTIONS @__PPG_ASSERTIONS_ENABLED@

#define PPG_DISABLE_CONTEXT_SWITCHING @__PPG_DISABLE_CONTEXT_SWITCHING@

#define PPG_HAVE_STATISTICS @__PPG_STATISTICS_ENABLED@

#define PPG_HAVE_LOGGING @__PPG_LOGGING_ENABLED@

#if PPG_PRINT_SELF_ENABLED

#include <stdio.h>

inline
static void ppg_indent(int tabs)
{
   for(int i = 0; i < tabs; ++i) {
      printf("\t");
   }
}

#define PPG_I ppg_indent(indent);

#endif

#endif
